#!/bin/bash
#
# git-nef-subtree - Automatize management of multiple Git subtrees
#
# Must be runned from within a Git repository.
# If no <branch> argument is given, all branches are managed.
#


if [ $# -eq 0 ]; then
    set -- -h
fi
OPTS_SPEC="\
git nef-subtree clean
git nef-subtree split [<branch1>] ...
        Split all subtrees form branches and save them to .git/refs/sub/

git nef-subtree fetch (subtrees)
        Fetch all subtree into .git/refs/sub/ from upstreams
        as defined in each subtree's README[.md]

git nef-subtree merge (subtrees)
        For each SUBTREE, merge .git/refs/sub/SUBTREE/*
                          into: .git/refs/sub/SUBTREE/merge

git nef-subtree join  [<branch1>] ...
        For each SUBTREE, subtree-merge: .git/refs/sub/SUBTREE/merge
        as subtree into branches' tree.

git nef-subtree push  (subtrees)
        Push all subtree from .git/refs/sub/ to upstreams
        as defined in each subtree's README[.md]

git nef-subtree sync  [<branch1>] ...
        Perform: split, fetch, merge, join, push
--
h,help        show the help
q             quiet
d             show debug messages
"
eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)"

PATH=$PATH:$(git --exec-path)
. git-sh-setup

ensure_clean()
{
    if ! git diff-index HEAD --exit-code --quiet 2>&1; then
	die "Working tree has modifications.  Cannot add."
    fi
    if ! git diff-index --cached HEAD --exit-code --quiet 2>&1; then
	die "Index has modifications.  Cannot add."
    fi
}

list_branches()
{
    local _dir=$GIT_DIR/${1-refs/heads/}
    find $_dir -type f | sed s,^$_dir,,
}

list_subtrees()
{
    git show-ref \
        | grep ' refs/sub/' \
        | sed -r 's,[0-9a-z]+ refs/sub/([^/]+)/.*,\1,' \
        | uniq
}

# usage: print_readme_sha1 <ref>
print_branch_readme_sha1() {
    git ls-tree "$_branch" \
        | grep -E "[[:space:]]README" | awk '{print $3}'
}
print_subtree_remotes()
{
    _opts=()
    while true; do
        case "$1" in
            --branches) _opts=("${_opts[@]}" --branches "$2"); shift 2 ;;
            *) break ;;
        esac
    done

    foreach_branch "${_opts[@]}" print_branch_readme_sha1 \
        | xargs -r -n 1 git cat-file -p \
        | grep " -P $1 " \
        | sed -r 's,git subtree [a-z]+ +-P *[^ ]+ (.*),\1,' \
        | sort | uniq
}

require_work_tree
ensure_clean

quiet=
debug=

while [ $# -gt 0 ]; do
    opt="$1"
    shift
    case "$opt" in
	-q) quiet=1 ;;
	-d) debug=1 ;;
	--) break ;;
	*) die "Unexpected option: $opt" ;;
    esac
done

command="$1"
shift

ref_base=refs/sub

foreach_branch()
{
    _branches=
    while true; do
        case "$1" in
            --branches) _branches="$2"; shift 2 ;;
            *) break ;;
        esac
    done

    [ -z "$_branches" ] && _branches=$(list_branches)
    branch_count=$(echo $_branches | wc -w)
    n=0

    for _branch in $_branches; do
        n=$(( n+1 ))
        "$@"
    done
}

_each_branch_subtree()
{
    say ""
    say "*** Processing branch [$n / $branch_count]: $_branch"
    if [ "$(git symbolic-ref HEAD 2>/dev/null)" != "refs/heads/$_branch" ]; then
        git checkout --quiet $_branch
    fi
    subtrees=$(cat README* \
                      | grep -E "^git subtree (pull|push)" \
                      | sed -r 's,git subtree [a-z]+ +-P *([^ ]+) .*,\1,' \
                      | sort | uniq)

    for subtree in $subtrees; do
        subtree_ref_base=$ref_base/$subtree
        subtree_merge_ref=$subtree_ref_base/_merge
        subtree_ref=$subtree_ref_base/$_branch
       "$@"
    done
}

foreach_branch_subtree() {
    _opts=()
    while true; do
        case "$1" in
            --branches) _opts=("${_opts[@]}" --branches "$2"); shift 2 ;;
            *) break ;;
        esac
    done

    foreach_branch "${_opts[@]}" _each_branch_subtree "$@"
}

foreach_subtree() {
    for subtree in $(list_subtrees); do
        subtree_ref_base=$ref_base/$subtree
        subtree_merge_ref=$subtree_ref_base/_merge
        say "** FOR SUBTREE $subtree DO: $*"
        "$@"
    done
}

################################################################################
## CLEAN

cmd_clean() {
    if [ -d .git/refs/sub ]; then
        say "Removing: .git/refs/sub/"
        rm -rf .git/refs/sub/
    else
        say "Clean already."
    fi
}

################################################################################
## SPLIT

_cmd_split_one() {
    local _commit=$(git subtree split -P $subtree --rejoin)
    say "  $(git rev-parse --short $_commit) $subtree_ref"
    git-update-ref -m "nef-subtree split command" $subtree_ref $_commit
}

cmd_split() {
    _opts=()
    if [ $# -gt 0 ]; then
        _opts=("${_opts[@]}" --branches "$*")
    fi
    foreach_branch_subtree "${_opts[@]}" _cmd_split_one
    # foreach_branch_subtree _cmd_split_one "$@"
}

################################################################################
## JOIN

_cmd_join_one_branch_subtree()
{
    local _merging_ref=$subtree_ref_base/_merge

    prev_head=$(git rev-parse HEAD)
    # say "Running: git subtree merge -P $subtree $_merging_ref"
    # git subtree merge -P $subtree $_merging_ref
    git merge -Xsubtree="$subtree" -Xtheirs -m "Merge commit '$_merging_ref' into $_branch as subtree '$subtree' (by git-nef-subtree)" $_merging_ref

    if [ $? -ne 0 ]; then
        die "merge conflict"
    fi
    if [ $prev_head != $(git rev-parse HEAD) ]; then
        _commit=$(git subtree split -P $subtree --rejoin)
        say "  $(git rev-parse --short $_commit) $subtree_ref"
        echo git-update-ref -m "nef-subtree merge: $_merging_ref" $subtree_ref $_commit
    fi
}

# integrate the merge back into the branch (opposite of the 'split' command)
cmd_join() {
    _opts=()
    if [ $# -gt 0 ]; then
        _opts=("${_opts[@]}" --branches "$*")
    fi
    foreach_branch_subtree "${_opts[@]}" _cmd_join_one_branch_subtree "$@"
}

################################################################################
## FETCH / PUSH

_each_subtree_remote() {
    _opts=()
    while true; do
        case "$1" in
            --branches) _opts=("${_opts[@]}" --branches "$2"); shift 2 ;;
            *) break ;;
        esac
    done

    say ""
    say "*** Subtree: $subtree [${_opts[*]}]" >&2

    old_ifs="$IFS"
    IFS=$'\n'
    for _remote in $(print_subtree_remotes "${_opts[@]}" "$subtree"); do

        IFS="$old_ifs"
        local def=($_remote)
        remote_url="${def[0]}"
        remote_branch="${def[1]}"
        local_branch=remote-$(echo "$_remote" | sha1sum | awk '{print $1}' | sed -r 's,^(.{8}).*,\1,')
        local_ref=$subtree_ref_base/$local_branch

        say "** FOR REMOTE $_remote OF SUBTREE $subtree DO: $*"
        "$@"
    done
    IFS="$old_ifs"
}
foreach_subtree_remote() {
    _opts=()
    while true; do
        case "$1" in
            --branches) _opts=("${_opts[@]}" --branches "$2"); shift 2 ;;
            *) break ;;
        esac
    done

    foreach_subtree _each_subtree_remote "${_opts[@]}" "$@"
}

# FETCH
_cmd_fetch_one_subtree_remote() {
    say "Fetch $remote_url for $remote_branch -> $local_ref"
    git fetch "$remote_url" "$remote_branch:$local_ref"

}
cmd_fetch() {
    _opts=()
    if [ $# -gt 0 ]; then
        _opts=("${_opts[@]}" --branches "$*")
    fi

    foreach_subtree_remote "${_opts[@]}" _cmd_fetch_one_subtree_remote
}
# PUSH
_cmd_push_one_subtree_remote() {
    say "Push $remote_url for $local_ref -> $remote_branch"
    git update-ref -m "nef-subtree merge" $local_ref $subtree_merge_ref \
        || die "git-update-ref failed with status $? at updating: $subtree_merge_ref"
    git push "$remote_url" "$local_ref:$remote_branch"
}
cmd_push() {
    _opts=()
    if [ $# -gt 0 ]; then
        _opts=("${_opts[@]}" --branches "$*")
    fi

    foreach_subtree_remote "${_opts[@]}" _cmd_push_one_subtree_remote
}

################################################################################
## MERGE

_cmd_merge_one_subtree()
{
    local _dir=$GIT_DIR/$subtree_ref_base
    local _tomerge=$(find $_dir -type f | sed s,^$GIT_DIR/,, | grep -vE '^$_merge$')

    if ! git show-ref $subtree_merge_ref >/dev/null; then
        git update-ref -m "nef-subtree merge" $subtree_merge_ref "$(echo "$_tomerge" | head -n 1)"  \
            || die "git-update-ref failed to update $subtree_merge_ref with status $?"
    fi
    say "Checking out: $subtree_merge_ref"
    git checkout --quiet $subtree_merge_ref \
        || die "git-checkout failed with status $?"

    prev_head=$(git rev-parse HEAD)
    for _merging_ref in $_tomerge; do

        # say "  merging into $subtree_merge_ref: $_merging_ref"
        git merge -m "Merge commit '$_merging_ref' into $subtree_merge_ref for subtree '$subtree' (by git-nef-subtree)" $_merging_ref \
            || die "git-merge failed with status $? at merging ref: $_merging_ref"
        # die grr
    done
    head_commit=$(git rev-parse HEAD)
    if [ $prev_head != $head_commit ]; then
        echo git update-ref -m "nef-subtree merge" $subtree_merge_ref $head_commit
        git update-ref -m "nef-subtree merge" $subtree_merge_ref $head_commit \
            || die "git-update-ref failed with status $? at updating: $subtree_merge_ref"

        say "subtree updated to $head_commit: $subtree [$subtree_merge_ref]"
    else
        say "subtree was not updated: $subtree"
    fi

    # for _merging_ref in $_tomerge; do
    #     git update-ref -m "nef-subtree merge" $subtree_merge_ref "$(echo "$_tomerge" | head -n 1)"  \
    #         || die "git-update-ref failed to update $subtree_merge_ref with status $?"
    # done
}

cmd_merge()
{
    # perform merge between all sub-branches of each given subtree
    foreach_subtree _cmd_merge_one_subtree "$@"
}

################################################################################
## SYNC

cmd_sync()
{
    if [ -d "$ref_base" ]; then
        say "Removing dir: $ref_base"
        rm -rf $ref_base
    fi
    cmd_split "$@"
    cmd_fetch "$@"
    cmd_merge "$@"
    cmd_join "$@"
    cmd_push "$@"
}


"cmd_$command" "$@"
