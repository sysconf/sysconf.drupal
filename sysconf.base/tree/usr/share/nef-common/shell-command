# BASH utilities for scripted commands               -*- shell-script -*-
# $NEF_DIR_USER/usr/share/nef-common/shell-command
#
# Part of SYSCONF profile "sysconf.base"
# https://github.com/geonef/sysconf.base
#
#
# HISTORY
#   20140707 Migrated from common.sh
#
# AUTHORS
#   JF Gigand <jf@gigand.fr>
#
# EXAMPLE
#   #!/bin/bash
#   # this is an example of use of nef util shell-command
#
#   [ "x$NEF_DIR_USR" = x ] && NEF_DIR_USR=/usr
#   . $NEF_DIR_USR/share/nef-common/shell-command
#

[ -z "$nef_command_name" ] && nef_command_name="$(basename "$0")"
[ -z "$nef_hostname" ] && nef_hostname="$(/bin/hostname)"
[ -z "$nef_command_prefix" ] && nef_command_prefix="nef_command" # new spec is: "script"
lib_shell_command_path="${BASH_SOURCE[0]}"

######################################################################
# SETTINGS

nef_command_init_options()
{
    nef_command_path=$0
    nef_command_callname=$(basename $nef_command_path)
    [ "x$nef_command_name" = x ] && nef_command_name=$nef_command_callname

    nef_opt_show_verbose=no
    nef_opt_show_debug=no
}

######################################################################
# FUNTIONS

nef_log() {
    [ "x$NEF_LOG_FILE" = x ] && NEF_LOG_FILE="$LOG_FILE" # Legacy compat

    local _echo=yes
    declare _opt_verbose=no
    declare _opt_debug=no
    declare _opt_prepend=""

    while [ "$1" != "" ]; do

        case "$1" in
            -n) local NEF_LOG_NO_PREFIX=yes; shift ;;
            -p | --prepend) _opt_prepend="$2"; shift; shift ;;
            -v | --verbose) _opt_verbose=yes; shift ;;
            -d | --debug) _opt_debug=yes; shift ;;
            --) shift; break ;;
            -*) nef_log "nef_log(): bad option: $1"; shift ;;
            *) break ;;
        esac

    done

    [ $_opt_debug = yes -a x$nef_opt_show_debug = xno ] && return 0
    [ $_opt_verbose = yes -a x$nef_opt_show_verbose = xno ] && _echo=no

    local txt="$*"
    local line="$*"
    local prefix="$NEF_LOG_PREFIX"
    [ -z "$prefix" -a "$NEF_LOG_NO_PREFIX" != yes ] && prefix="$nef_command_name@$nef_hostname"
    [ -n "$prefix" -a "$NEF_LOG_PREFIX_NOCOLUMN" != yes ] && prefix="${prefix}: "
    # prefix=$(basename $0)


    if [ $_echo = yes ]; then
        echo "${prefix}${_opt_prepend}${line}" >&2
        logger -t "${nef_command_name}" "${_opt_prepend}${line}"
    fi

    if [ "$NEF_LOG_FILE" != "" ]; then
        if [ "x$NEF_LOG_DATE" = xyes ]; then
            date="`date +'%Y-%m-%d %H:%M:%S.%N' | sed -E 's/.{6}$//'`"
            prefix="$date $prefix"
        fi
        echo "${prefix}${_opt_prepend}${line}" >>"$NEF_LOG_FILE"
    fi
}

nef_log_pipe() {
    local _opt_stdout=no

    while true; do
        case "$1" in
            --stdout) _opt_stdout=yes; shift ;;
            *) break ;;
        esac
    done

    while read; do
        nef_log "$@" "$REPLY"
        [ $_opt_stdout = yes ] && echo "$REPLY"
    done
    return 0
}

nef_cmd()
{
    local _opt_log_prefix=
    local _opt_stdname=no
    local _opt_print=no

    while [ "$1" != "" ]; do

        case "$1" in
            --log-prefix) _opt_log_prefix="$2"; shift; shift ;;
            --stdname) _opt_stdname=yes; shift ;;
            --print) _opt_print=yes; shift ;;
            --) shift; break ;;
            -*) nef_log "nef_log(): bad option: $1"; shift ;;
            *) break ;;
        esac

    done

    if [ -z "$_opt_log_prefix" ]; then
        _opt_log_prefix="$1"
    fi

    local _stdout_prefix="${_opt_log_prefix}:"
    local _stderr_prefix="${_opt_log_prefix}:"
    if [ $_opt_stdname = yes ]; then
        _stdout_prefix="${_opt_log_prefix} <stdout>:"
        _stderr_prefix="${_opt_log_prefix} <stderr>:"
    fi

    if [ $_opt_print = yes ]; then
        nef_log "Running:" "$@"
    fi
    _last_test_output=$(
        {
            # thanks to http://stackoverflow.com/questions/9112979/pipe-stdout-and-stderr-to-two-different-processes-in-shell-script
            {
                "$@" 2>&3 | nef_log_pipe --stdout -v "$_stdout_prefix" >&4
                # This is tricky: we print FAILURE=<code> to send it back to main (sub)shell
                local _status=${PIPESTATUS[0]}
                if [ $_status -ne 0 ]; then
                    echo "FAILURE=$_status;" >&4
                fi
            } 3>&1 1>&2 | nef_log_pipe -v "$_stderr_prefix"
        }  4>&1
    )

    # The trick
    local _line;
    _line=$(echo "$_last_test_output" | tail -n 1 | grep "^FAILURE=");
    if [ $? -eq 0 ]; then
        local _status=$(echo $_line | sed -r 's/^FAILURE=([-0-9]);/\1/')
        nef_fatal "command failed with status $_status:" "$@"
    fi

    return 0
}

nef_fatal() {
    local _status=1
    local _prefix="FATAL ERROR: "

    while [ "$1" != "" ]; do
        case "$1" in
            --status) _status="$2"; shift 2 ;;
            -ne) _status=; shift ;;
            --warn) _status=; _prefix="WARNING: "; shift ;;
            --) shift; break ;;
            -*) nef_log "nef_fatal(): bad option: $1"; shift ;;
            *) break ;;
        esac

    done

    nef_log "${_prefix}$*"

    [ -n "$_status" ] && exit $_status;
}

nef_fatal_usage_option="--help"
nef_fatal_usage() {
    local _msg="$1"
    if [ "x$1" = x ]; then
        _msg="USAGE ERROR"
    else
        _msg="USAGE ERROR: $*"
    fi
    nef_log "$_msg"
    nef_log "type ${nef_command_callname} ${nef_fatal_usage_option} for command usage"
    # echo
    # nef_show_usage
    exit 1;
}
nef_fatal_usage_command() {
    local _command="$1"; shift

    nef_log "$_command usage error (try: $_command -h): $*"
    exit 1
}
nef_show_usage() {
    local _usage_command=${nef_command_prefix}_usage

    [ "$(type -t $_usage_command)" = "function" ] \
        || _usage_command=${nef_command_prefix}_help

    [ "$(type -t $_usage_command)" = "function" ] \
        || nef_fatal "function '$_usage_command' not defined by script $0"

    $_usage_command
}

# Usage: nef_confim "question?" && command...
nef_confirm()
{
    # Inspired from http://stackoverflow.com/questions/1885525/how-do-i-prompt-a-user-for-confirmation-in-bash-script
    read -p "$1 [y/n] ? " -n 1 -r
    echo >&2
    [[ $REPLY =~ ^[Yy]$ ]]
}

nef_command_merge_env() {
    local _path=/etc/default/$nef_command_name

    if [ -f $_path ]; then
        nef_log -v "Loading defaults from $_path"
        . $_path
    fi
}

# Usage: nef_show_help [<name>]
#
# This works by reading the command script itself ($0) and parsing out
# the doc comments "Ã  la javadoc"
#
# --prefix <prefix>     Show <prefix> before command name instead of 4 spaces
# --sep <usage sep>     Separator char (or string) between <name> and its usage (" " by default)
# --sep2 <usage out sep> Separator char (or string) for no --full output ("\t" by default)
# --match <prefix>      Match <prefix> for beginning instead of "command:"
# --full                Show lines after <name>, until a "##" token
# --underline           Underline <name> (and its usage/args) like a title
#
nef_show_help() {
    local _usage_only=no
    local _match=command:
    local _full=no
    local _specific=no
    local _prefix=
    local _sep=" "
    local _sep2="\t"
    local _show_common=1
    local _underline=no

    while [ "$1" != "" ]; do
        case "$1" in
            --prefix) _prefix="$2"; shift 2 ;;
            --sep) _sep="$2"; _sep2="$2"; shift 2 ;;
            --match) _match="$2"; _specific=yes; shift 2 ;;
            --full) _full=yes; shift ;;
            --underline) _underline=yes; shift ;;
            # --all) _all=yes; shift ;;
            --) shift; break ;;
            -*) nef_log "nef_show_help(): bad option: $1"; shift ;;
            *) break ;;
        esac
    done
    local _command="$1"
    if [ -z "$_prefix" ]; then
        if [ -n "$_command" ]; then
            _prefix="usage: $nef_command_callname "
        else
            _prefix="    "
        fi
    fi
    local _keep_showing=no
    # local _prefix1="usage: $nef_command_callname"
    # local _prefix2=$(echo "$_prefix1" | sed "s/./ /g")
    local _had_command=no
    local _category=
    local _ignore_blank=no


    if [ -z "$_command" -a $_specific = no ]; then
        _keep_showing=yes
        _ignore_blank=yes
        # cmd_description=$(cat $(which "$0") | head -n 3 | tail -n 1 | sed -r 's/[^-]*- ?//')
        # cat <<-EOF
	# $nef_command_callname - $cmd_description

	# $_prefix1 <command> [options]

	# EOF
    fi
    # grep -E '^#([^!]|$)' "$(which "$0")" | sed -r 's/^# ?//' | (
    grep -E '^#([^!]|$)' "$(which "$0")" | (
        while read; do
            local _rline="${REPLY#\#}"
            local _line="${_rline# }"
            local _command_name=

            if [ "$_keep_showing" = yes ]; then
                if [[ "$_rline" =~ ^# ]]; then
                    _keep_showing=no
                    if [ -n "$_command" -a "$_command" != _common -a $_show_common = yes ]; then
                        _command=_common
                        continue
                    else
                        [ -n "$_command" ] && break
                        echo; echo
                    fi
                else
                    if [ -n "$_line" -o $_ignore_blank = no ]; then
                        echo "$_line"
                        _ignore_blank=no
                    fi
                    continue
                fi
            fi
            if [[ "$_line" =~ ^common\ options: ]]; then
                if [ "$_command" = _common ]; then
                    echo
                    echo "Common options:"
                    echo
                    _keep_showing=yes
                fi
            elif [[ "$_line" =~ ^COMMANDS: ]]; then
                if [ $_specific = no ]; then
                    _category=$(echo "$_line" | sed -r 's/^COMMANDS: *(.*)/\1/')
                    if [ -z "$_command" ]; then
                        [ $_had_command = yes ] && echo
                        echo "${_category} COMMANDS"
                        echo
                    fi
                    _had_command=no
                fi

            elif [[ "$_line" =~ ^${_match} ]]; then
                _command_name=$(echo "$_line" | sed -r "s/^${_match} ([^${_sep}]+)(${_sep})?.*/\1/")
                _command_args=$(echo "$_line" | sed -r "s/^${_match} [^${_sep}]+(${_sep})?(.*)/\2/")

                # echo "command: $_command_name full=$_full"
                if [ -n "$_command" -o $_full = yes ]; then
                    if [ -z "$_command" -o "$_command" = "$_command_name" ]; then
                        echo "${_prefix}${_command_name}${_sep}${_command_args}"
                        if [ $_usage_only = yes ]; then
                            break;
                        fi
                        [ $_underline = yes ] \
                            && echo "${_prefix}${_command_name}${_sep}$_command_args" | sed s/./-/g
                        _keep_showing=yes
                        _ignore_blank=yes
                        echo
                        if [ -n "$_category" ]; then
                            echo "$_category COMMAND:"
                        fi
                    fi
                else
                    echo -e "${_prefix}${_command_name}${_sep2}${_command_args}"
                    _had_command=yes
                fi
            fi

        done
    )
    echo
}
