#!/bin/bash
#
# refresh-guest-status -- handle
#
# The arguments sent to the script are "add" or "del",
# then the MAC address, the IP address and finally the hostname
# if there is one.
#
# --> we don't mind the argument as we update the whole anyway

# nef_command_name=refresh-guest-status

log=/var/log/refresh-guest-status.log
echo $(date) -- "$@" >>$log

_log() {
    echo $(date) "$@" >>$log
}

# usage: _resolve_host <host>
_resolve_host() {
    local _host="$1"
    local _ip

    if [[ $_host =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        _ip=$_host

    # elif [ "$_host" = "*" ]; then
    #     # take network interface of default route
    #     _ip=$(route -n | grep ^0.0.0.0 | sed 's/.* //')
    #     _log route $_ip

    # elif ifconfig | grep -q "^$_host "; then
    #     # elif [ -d "/sys/class/net/$_host" ]; then
    #     _ip=$_host

    elif [[ $_host =~ \.lxc$ ]]; then
        local _lxc_name=$(echo "$_host" | sed 's/\.lxc$//')
        _ip=$(lxc-info -i -H -n "$_lxc_name")
        if [ $? -ne 0 ]; then
            _log "Warning: LXC container is not running or does not have an IP: $_lxc_name"
            return 1
        fi
    else
        _ip=$(getent ahostsv4 "$_host" | grep STREAM | grep -v ^127.0. | head -n 1 | cut -d ' ' -f 1)
        if [ -z "$_ip" ]; then
            _log "Warning: could not resolve host: $_host"
            return 1
        fi
    fi

    echo $_ip
}

cat /etc/metagitted/ipv4.forwarding.conf | grep -v '^ *#' | grep -v '^ *$' | (
    while read; do
        line=$(echo "$REPLY" | sed -r 's/[\t ]+/ /g')
        _log "Read line: $line"
        # src=$(echo "$line" | cut -d' ' -f1)
        # dest=$(echo "$line" | cut -d' ' -f3)
        # src=$(echo "$REPLY" | cut -d' ' -f1)
        # dest=$(echo "$REPLY" | cut -d' ' -f2)

        src_host=$(echo "$line" | cut -d' ' -f1)
        src_port=$(echo "$line" | cut -d' ' -f2)
        dest_host=$(echo "$line" | cut -d' ' -f3)
        dest_port=$(echo "$line" | cut -d' ' -f4)
        # echo Redirect from $src_host:$src_port to $dest_host:$dest_port >>$log

        # if [ "$src_host" != "*" ]; then
        # src_ip=$(_resolve_host "$src_host")
        # [ $? -eq 0 ] || continue
        # fi
        protocol=$(echo "$src_port" | cut -d/ -f2)
        src_port=$(echo "$src_port" | cut -d/ -f1)

        dest_ip=$(_resolve_host "$dest_host")
        [ $? -eq 0 ] || continue
        _log "Forward $protocol from $src_host:$src_port (IP=$src_ip) to $dest_host:$dest_port (IP=$dest_ip)"

        chain="PREROUTING"
        filter="-A PREROUTING"

        if [[ "$src_host" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then # IPv4
            _ip=$src_host
            src_label="destIP $_ip"
            chain="$chain -d $_ip"
            filter="$filter.* -d $_ip"

        elif [ "$src_host" = "*" ]; then                   # "*" = any interface
            src_label="any interface"
            # we do not specify -d (IP) nor -i (interface)

        elif [[ "$src_host" =~ ^: ]]; then
            _if=$(ifconfig | grep -E "^[^:]+$src_host " | sed 's/ .*//')
            if [ -z "$_if" ]; then
                _log "Warning: $src_host is not a valid interface (naming the virtual part, after the column)"
                continue
            fi
            src_label="virtual dest interface $_if"
            chain="$chain -i $_if"
            filter="$filter.* -i $_if"

        elif [ "$src_host" = default ]; then               # "default" = interface of default route
            # take network interface of default route
            _if=$(route -n | grep ^0.0.0.0 | sed 's/.* //')
            src_label="(default) dest interface $_if"
            chain="$chain -i $_if"
            filter="$filter.* -i $_if"

        elif ifconfig | grep -q "^$src_host "; then     # name of active interface
            _if=$src_host
            src_label="dest interface $_if"
            chain="$chain -i $_if"
            filter="$filter.* -i $_if"

        else                                            # otherwise: host name to resolve
            _ip=$(getent ahostsv4 "$src_host" | grep STREAM | grep -v ^127.0. | head -n 1 | cut -d ' ' -f 1)
            if [ -z "$_ip" ]; then
                _log "Warning: could not resolve host: $src_host"
                continue
            fi
            src_label="dest IP $_ip"
            chain="$chain -d $_ip"
            filter="$filter.* -d $_ip"

        fi

        chain="$chain -p $protocol --dport $src_port -j DNAT --to $dest_ip:$dest_port"
        filter="$filter.* -p $protocol.* --dport $src_port [^ ]+"

        _log "src_label: $src_label"
        _log "filter: $filter"

        # example: -A PREROUTING -i em1 -p tcp -m tcp --dport 80 -j DNAT --to-destination 10.0.3.220:80
        iptables -t nat -S PREROUTING | grep "^-A " | cat -n  >> $log
        old_rule=$(iptables -t nat -S PREROUTING | grep "^-A " | cat -n | grep -E -- "$filter" | head -n 1 | sed -r 's/^ *([0-9]+).*/\1/')

        # if [ -n "$old_rule" ]; then
        #     _log "OLD RULE NUMBER: $old_rule"
        #     iptables -t nat -R PREROUTING $old_rule
        # else
        #     _log iptables -t nat -A $chain
        #     iptables -t nat -A $chain
        # fi
        if [ -n "$old_rule" ]; then
            _log "OLD RULE NUMBER: $old_rule"
            iptables -t nat -D PREROUTING $old_rule
        fi

        _log iptables -t nat -A $chain
        iptables -t nat -A $chain

        # iptables -t nat --line-numbers -n -L PREROUTING | grep " tcp dpt:80 to:"
        # PREROUTING -p tcp --dport 8080 -j DNAT --to IP:8080
    done
)
# iptables -t nat -A lxc-nat -d #{src_ip} -p tcp --dport #{src_port} -j DNAT --to #{containers[lxc_name]}:#{lxc_port}
# iptables -t nat -F lxc-nat
# iptables -t nat -D PREROUTING -j lxc-nat
# iptables -t nat -X lxc-nat
