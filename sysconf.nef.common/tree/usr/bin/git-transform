#!/bin/bash
#
# git-transform - manages special Git branches for automatic content transformations
#
# HISTORY
#   20140702 first version by JF Gigand <jf@geonef.fr>

nef_command_name=git-transform
. $(dirname $0)/../share/nef-common/shell-command || exit 2

# . $NEF_DIR_USR/share/nef-common/shell-command


######################################################################
# DEFAULTS AND FUNCTIONS

# Name of our work dir inside GIT's own .git directory
#   will set "git_transform_work_path"
GIT_TRANSFORM_WORK_DIR=$nef_command_name

# Where to look for transform definition files, as a subdirectory
# of the transform branch tree
GIT_TRANSFORM_ENGINE_DIR=$nef_command_name

# Where the GIT bare repository lies from within the container FS
GIT_TRANSFORM_CONTAINER_REPOSITORY=/repository.git


################################################################################
### TRANSFORM PORCELAIN COMMANDS (work with branch/refs)

# command: status [<sync-name> [<channel>]]
#
# Shows a list the synchronizations which have been defined as refs.
# If <sync-name> is specified, the list is restricted to the given sync.
# If <channel> is specified, other channels than <channel> won't be shown.
##
nef_tr_command_status() {
    local _argv=()

    while [ -n "$1" ]; do
        case "$1" in
            -h) nef_tr_command_help apply; return ;;
            -*) nef_tr_eval_common_option "$1"; shift ;;
            *) _argv=("${_argv[@]}" "$1"); shift ;;
        esac
    done

    [ "${#_argv[@]}" -gt 2 ] && nef_fatal_usage_command add "too many args"
    local _name="${_argv[0]}"
    local _channel="${_argv[1]}"

    [ -z "$_name" ] && _name='*'
    [ -z "$_channel" ] && _channel='*'

    local _sync_ref=
    local _sync_refs=$(git for-each-ref --format="%(refname)" "refs/transform/$_name/SYNC")
    for _sync_ref in $_sync_refs; do
        local _sync_name=$(basename $(dirname $_sync_ref))
        local _sync_commit=$(git show-ref --hash $_sync_ref)
        nef_log "SYNC $_sync_name"
        nef_log "    REF $_sync_ref"
        nef_log "    COMMIT $_sync_commit"

        git cat-file -p $_sync_commit | sed 's/^/        /' | nef_log_pipe -v

        local _channel_ref=
        local _channel_refs=$(git for-each-ref --format="%(refname)" "refs/transform/$_sync_name/$_channel" | grep -v SYNC)
        for _channel_ref in $_channel_refs; do
            local _channel_name=$(basename $_channel_ref)
            local _channel_commit=$(git show-ref --hash $_channel_ref)

            nef_log ""
            nef_log "    CHANNEL ${_channel_name}"
            nef_log "        REF $_channel_ref"
            nef_log "        COMMIT $_channel_commit"
            git cat-file -p $_channel_commit | sed 's/^/            /' | nef_log_pipe -v
        done
    done
}

# command: git lxc create -n <name> [<transform-ref>] (defaults to "sync" and HEAD)
# ::
# lxc-create machin
# lxc-execute build ...
# git remote add machin
#

# command: create [<sync-name> [<transform-ref>]] (defaults to "sync" and HEAD)
# command: destroy <sync-name>
# command: add <sync-name> <transform-ref>
#
# Initialize a new synchronisation based on the transform tree-ish <transform-ref>.
#
# A sync commit is created by the transform engine and refs are updated
# under refs/transform/<sync-name>/SYNC and channels'.
##
nef_tr_command_add() {
    local _argv=()

    while [ -n "$1" ]; do
        case "$1" in
            -h) nef_tr_command_help apply; return ;;
            -*) nef_tr_eval_common_option "$1"; shift ;;
            *) _argv=("${_argv[@]}" "$1"); shift ;;
        esac
    done

    [ "${#_argv[@]}" -lt 2 ] && nef_fatal_usage_command add "missing arg(s)"
    [ "${#_argv[@]}" -gt 2 ] && nef_fatal_usage_command add "too many args"
    local _name="${_argv[0]}"
    local _transform_ref="${_argv[1]}"

    nef_log "Creating new sync out of transform '$_transform_ref' ..."
    local _commit="$(nef_tr_command_mksync $_transform_ref)"
    [ -z "$_commit" ] && nef_fatal "mksync did not return a valid commit"

    nef_tr_command_checkout-refs $_commit $_name
}

# command: rm <sync-name>
#
# Remove all references related to synchronisation <sync-name>.
##
nef_tr_command_rm() {
    local _argv=()

    while [ -n "$1" ]; do
        case "$1" in
            -h) nef_tr_command_help apply; return ;;
            -*) nef_tr_eval_common_option "$1"; shift ;;
            *) _argv=("${_argv[@]}" "$1"); shift ;;
        esac
    done

    [ "${#_argv[@]}" -lt 1 ] && nef_fatal_usage_command add "missing arg(s)"
    [ "${#_argv[@]}" -gt 1 ] && nef_fatal_usage_command add "too many args"
    local _name="${_argv[0]}"

    git for-each-ref --format="git update-ref -d %(refname)" --shell "refs/transform/$_name/" \
        | xargs -d "\n" -n 1 sh -c \
        || nef_fatal "failed to remove 1 or more refs"
}

# command: checkout <sync-name> <channel> [<branch>]
#
#   <branch> defaults to <channel>
# si <branch> existe : ne fait rien, indique un warning et indique la différence de commits
# sinon crée la/les branche(s)
#
# This sets <branch> -> <channel> tracking information into git-config(1).
##
#

# command: push [<sync-name> [ <branch>[:<channel>] ... ]
#
# comme git push
# intègre l'A/R : si plusieurs channel sont des "upstream" de branches locales, le pull automatique est possible avec --pull
# en fait très malin, est capable de détecter ce qui va se passer récursivement
##
nef_tr_command_push() {
    local _argv=()

    while [ -n "$1" ]; do
        case "$1" in
            -h) nef_tr_command_help apply; return ;;
            -*) nef_tr_eval_common_option "$1"; shift ;;
            *) _argv=("${_argv[@]}" "$1"); shift ;;
        esac
    done

    [ "${#_argv[@]}" -lt 2 ] && nef_fatal_usage_command add "missing arg(s)"
    [ "${#_argv[@]}" -gt 2 ] && nef_fatal_usage_command add "too many args"
    local _name="${_argv[0]}"
    local _pushref="${_argv[1]}"
    local _branch=$(echo $_pushref | cut -d: -f1)
    local _channel=$(echo $_pushref | cut -d: -f2)

    # ...
}

# command: pull [<sync-name>]
#
# le fetch n'a pas de sens (déjà là et les channels sont toujours à jour)
# équivalent à un merge, mais apporte le batch (sync automatique d'après trackings)
##

# command: service <sync-name>
#
#
##
nef_tr_command_service() {
    local _argv=()

    while [ -n "$1" ]; do
        case "$1" in
            -h) nef_tr_command_help service; return ;;
            -*) nef_tr_eval_common_option "$1"; shift ;;
            *) _argv=("${_argv[@]}" "$1"); shift ;;
        esac
    done

    [ "${#_argv[@]}" -lt 1 ] && nef_fatal_usage_command io "missing arg: <sync-commit>"
    [ "${#_argv[@]}" -gt 1 ] && nef_fatal_usage_command io "too many args"

    GIT_TRANSFORM_CONTAINER_SYNC=$(_to_git_commit "${_argv[0]}") \
        || nef_fatal_usage_command apply "invalid arg: <sync-commit>"

    local _commit=$(nef_tr_command_io $GIT_TRANSFORM_CONTAINER_SYNC)
    [ -z "$_commit" ] && nef_fatal "container did not return a valid commit"
}

# command: help [command]
#
# Print information about command usage.
#
# With no argument, a list of commands is printed.
##
nef_tr_command_help() {
    local _argv=()
    local _command=
    local _usage=0

    while [ -n "$1" ]; do
        case "$1" in
            --usage) _usage=1; shift ;;
            -h) nef_tr_command_help help; return ;;
            -*) nef_tr_eval_common_option "$1"; shift ;;
            *) _command="$1"; break ;;
        esac
    done

    local _keep_showing=0
    local _prefix1="usage: $nef_command_callname"
    local _prefix2=$(echo "$_prefix1" | sed "s/./ /g")

    if test -z "$_command"; then
        cat <<-EOF
	$nef_command_callname - manage data transformations through GIT

	$_prefix1 [--verbose] [--debug-verbose] [--help]
	$_prefix2 <command> [<args>]

	EOF
    fi
    grep -E ^# "$(which "$0")" | (
        while read; do
            local _command_name=
            local _line=$(echo "$REPLY" | sed -r 's/^# ?//')

            if test "$_keep_showing" -ne 0; then
                if echo "$REPLY" | grep -qE "^##"; then
                    _keep_showing=0
                    exit
                else
                    echo "$_line"
                    continue
                fi
            fi
            if echo "$_line" | grep -qE "^command:"; then
                full=$(echo "$_line" | sed 's/^command: //')
                _command_name=$(echo "$full" | sed 's/ .*//')
                _command_args=$(echo "$full" | sed -r 's/^[^ ]+ //')

                if test -n "$_command"; then
                    if test "$_command" = "$_command_name"; then
                        echo "usage: $nef_command_callname $_command $_command_args"
                        [ $_usage -eq 0 ] && _keep_showing=1
                    fi
                else
                    echo -e "    $_command_name\t$_command_args"
                fi
            fi
            if echo "$REPLY" | grep -qE "^### "; then
                if test -z "$_command"; then
                    full=$(echo "$REPLY" | sed 's/^### //')
                    echo
                    echo "  $full"
                    echo
                fi
            fi

        done
    )
    echo
}


################################################################################
### TRANSFORM REF HELPERS

# command: checkout-refs  [ --update [--force] [--no-delete] | --create ] [ --force ] <sync-commit-ref> <ref-prefix> [<channel>]
#
#   if <ref-prefix> does not include a slash, "refs/transform/" is prepend to it
#   iterate over \$(git-transform show-channels) and execute:
#       git update-ref <ref-prefix>/${CHANNEL_NAME}  ${CHANNEL_VALUE}
##
nef_tr_command_checkout-refs() {
    local _argv=()

    while [ -n "$1" ]; do
        case "$1" in
            -h) nef_tr_command_help apply; return ;;
            -*) nef_tr_eval_common_option "$1"; shift ;;
            *) _argv=("${_argv[@]}" "$1"); shift ;;
        esac
    done

    [ "${#_argv[@]}" -lt 1 ] && nef_fatal_usage_command checkout-refs "missing arg(s)"
    [ "${#_argv[@]}" -gt 3 ] && nef_fatal_usage_command checkout-refs "too many args"

    _sync_commit=$(_to_git_commit "${_argv[0]}") || nef_fatal_usage_command checkout-refs "invalid arg: <sync-commit>"
    local _ref_prefix="${_argv[1]}"
    local _channel="${_argv[2]}"
    if echo "$_ref_prefix" | grep -vq /; then
        _ref_prefix=refs/transform/$_ref_prefix
    fi

    local _channels="$(nef_tr_command_channels $_sync_commit $_channel)"
    [ -z "$_channels" ] && nef_fatal "no channel retrieved out of sync commit $_sync_commit"

    nef_log "Setting ref $_ref_prefix/SYNC to $_sync_commit"
    git update-ref $_ref_prefix/SYNC $_sync_commit \
        || nef_fatal "git update-ref failed with status $?"
    for _ch in $_channels; do
        local name=$(echo $_ch | cut -d= -f1)
        local value=$(echo $_ch | cut -d= -f2)
        local ref=$_ref_prefix/$name
        nef_log "Setting ref $ref to $value"
        git update-ref $ref $value \
            || nef_fatal "git update-ref failed with status $?"
    done
}

# command: check-refs <ref-prefix>
#
#   if <ref-prefix> does not include a slash, "refs/transform/" is prepend to it
#   vérifie que <ref-prefix>/merge-state existe
#   vérifier que <ref-prefix>/* sont à jour du commit pointé par 'merge-state' et qu'il ne manque rien
#   options --ignore-extra --ignore-missing qui vont bien
##
nef_tr_command_check-refs() {
    nef_fatal "command 'check-refs' is not implemented yet"
}

################################################################################
### TRANSFORM CONTAINER COMMANDS (fully detached from any branch/ref)

# command: mksync <transform-ref>
#
# Create a new sync for the given transform which is a tree-ish reference
# to a transform engine implementation that provide enough information
# to be runned as a Docker container.
#
#     <transform-commit> can be a branch name, a commit ID or any other tree-ish thing
##
nef_tr_command_mksync() {
    local _argv=()

    while [ -n "$1" ]; do
        case "$1" in
            -h) nef_tr_command_help mksync; return ;;
            -*) nef_tr_eval_common_option "$1"; shift ;;
            *) _argv=("${_argv[@]}" "$1"); shift ;;
        esac
    done

    [ "${#_argv[@]}" -lt 1 ] && nef_fatal_usage_command mksync "missing arg: <transform-commit>"
    [ "${#_argv[@]}" -gt 1 ] && nef_fatal_usage_command mksync "too many args"

    local _transform_commit=$(_to_git_commit "${_argv[0]}") \
        || nef_fatal_usage_command mksync "invalid arg: <transform-commit>"

    local _commit=$(nef_tr_run_transform_command "$_transform_commit" mksync)
    [ -z "$_commit" ] && nef_fatal "container did not return a valid commit"

    echo $_commit
}

# command: channels [--all] [--hash|--name|--shell] <sync-commit-ref> [<channel-name>]
#
#     <sync-commit-ref> is a sync commit reference of which channels must be listed
#
#     <channel-name> is the channel name. Valid values would be given by:
#     \$($nef_command_callname channels --all --name <sync-commit-ref>)
#
#     --all     Include the "transform" channel in the channel list
#     --hash    Just print the hash ID
#     --name    Just print the channel name
#     --shell   Print "name=ID" lines that can be eval'ed by a shell
##
nef_tr_command_channels() {
    local _opt_all=no
    local _opt_channel_format=shell
    local _argv=()

    while [ -n "$1" ]; do
        case "$1" in
            --all) _opt_all=yes; shift ;;
            --name) _opt_channel_format=name; shift ;;
            --hash) _opt_channel_format=hash; shift ;;
            --shell) _opt_channel_format=shell; shift ;;
            -h) nef_tr_command_help channels; return ;;
            -*) nef_tr_eval_common_option "$1"; shift ;;
            *) _argv=("${_argv[@]}" "$1"); shift ;;
        esac
    done

    [ "${#_argv[@]}" -lt 1 ] && nef_fatal_usage_command channels "missing arg: <sync-commit>"
    [ "${#_argv[@]}" -gt 2 ] && nef_fatal_usage_command channels "too many args"

    GIT_TRANSFORM_CONTAINER_SYNC=$(_to_git_commit "${_argv[0]}") \
        || nef_fatal_usage_command channels "invalid arg: <sync-commit>"
    _transform_commit=$(_sync_to_transform_commit $GIT_TRANSFORM_CONTAINER_SYNC)
    _only_channel="${_argv[1]}"

    local _channels=$(nef_tr_run_transform_command \
        "$_transform_commit"  channels "$@" | sort $next)

    for _channel in $_channels; do
        name=$(echo $_channel | sed 's/=.*//')
        hash=$(echo $_channel | sed 's/.*=//')

        if [ "$_only_channel" != "" ]; then
            if [ "$_only_channel" = $name ]; then
                _opt_all=yes
            else
                hash=""
                _opt_all=no
            fi
        fi
        if [ "$nef_tr_opt_all" = yes -o -n "$hash" ]; then

            case $_opt_channel_format in
                name) echo $_channel | sed 's/=.*//' ;;
                hash) echo $_channel | sed 's/.*=//' ;;
                shell) echo "$_channel" ;;
            esac
        fi
    done
}

# command: apply <sync-commit-ref> <channel-name> <commit-ref>
#
# Merge the given commit into the sync, interpreted through the given channel.
#
#     <sync-commit-ref> is a reference to the sync to base the transform application on.
#
#     <channel-name> is the name of the channel, like "in", "out", "source",
#     "build"... or "transform". Use the "transform" channel to update the transform
#     engine (instead of the data).
#
#     <sync-commit-ref> is a reference to the commit to merge. IT MUST BE SINGLE
#     COMMIT! Branch refs like "master" can be given, but merging multiple commits
#     won't work. For that, use "$nef_command_callname" instead.
##
nef_tr_command_apply() {
    local _argv=()

    while [ -n "$1" ]; do
        case "$1" in
            -h) nef_tr_command_help apply; return ;;
            -*) nef_tr_eval_common_option "$1"; shift ;;
            *) _argv=("${_argv[@]}" "$1"); shift ;;
        esac
    done

    [ "${#_argv[@]}" -lt 3 ] && nef_fatal_usage_command apply "missing arg(s)"
    [ "${#_argv[@]}" -gt 3 ] && nef_fatal_usage_command apply "too many args"

    GIT_TRANSFORM_CONTAINER_SYNC=$(_to_git_commit "${_argv[0]}") \
        || nef_fatal_usage_command apply "invalid arg: <sync-commit>"
    GIT_TRANSFORM_CONTAINER_APPLY_CHANNEL="${_argv[1]}"
    GIT_TRANSFORM_CONTAINER_APPLY_COMMIT=$(_to_git_commit "${_argv[2]}") \
        || nef_fatal_usage_command apply "invalid arg: <content-commit>"

    _transform_commit=$(_sync_to_transform_commit $GIT_TRANSFORM_CONTAINER_SYNC)
    [ -z "$_transform_commit" ] && nef_fatal

    local _commit=$(nef_tr_run_transform_command "$_transform_commit" apply)
    [ -z "$_commit" ] && nef_fatal "container did not return a valid commit"

    echo $_commit
}

# command: io <sync-commit-ref>
#
# Start the transform as a service, as an editor (RW) or viewer (RO) of the data.
#
# An HTTP service, for example can provide a website that cause
# some of the channels to be updated.
##
nef_tr_command_io() {
    local _argv=()

    while [ -n "$1" ]; do
        case "$1" in
            -h) nef_tr_command_help io; return ;;
            -*) nef_tr_eval_common_option "$1"; shift ;;
            *) _argv=("${_argv[@]}" "$1"); shift ;;
        esac
    done

    [ "${#_argv[@]}" -lt 1 ] && nef_fatal_usage_command io "missing arg: <sync-commit>"
    [ "${#_argv[@]}" -gt 1 ] && nef_fatal_usage_command io "too many args"

    GIT_TRANSFORM_CONTAINER_SYNC=$(_to_git_commit "${_argv[0]}") \
        || nef_fatal_usage_command apply "invalid arg: <sync-commit>"

    _transform_commit=$(_sync_to_transform_commit $GIT_TRANSFORM_CONTAINER_SYNC)
    [ -z "$_transform_commit" ] && nef_fatal

    # nef_tr_run_transform_command --interactive "$_transform_commit" io
    trap _sigint INT
    trap _sigterm TERM
    local _commit=$(nef_tr_run_transform_command "$_transform_commit" io)
    nef_log "got: $_commit"
    [ -z "$_commit" ] && nef_fatal "container did not return a valid commit"
}
_sigint() {
    echo "Trapped io SIGINT !" >&2
}
_sigterm() {
    echo "Trapped io SIGTERM !" >&2
    jobs
    wait
}

# command: shell <sync-commit-ref>
#
# Start a shell inside the container for given sync-commit's transform.
##
nef_tr_command_shell() {
    local _argv=()

    while [ -n "$1" ]; do
        case "$1" in
            -h) nef_tr_command_help io; return ;;
            -*) nef_tr_eval_common_option "$1"; shift ;;
            *) _argv=("${_argv[@]}" "$1"); shift ;;
        esac
    done

    [ "${#_argv[@]}" -lt 1 ] && nef_fatal_usage_command io "missing arg: <sync-commit>"
    [ "${#_argv[@]}" -gt 1 ] && nef_fatal_usage_command io "too many args"

    GIT_TRANSFORM_CONTAINER_SYNC=$(_to_git_commit "${_argv[0]}") \
        || nef_fatal_usage_command apply "invalid arg: <sync-commit>"
    _transform_commit=$(_sync_to_transform_commit $GIT_TRANSFORM_CONTAINER_SYNC)
    [ -z "$_transform_commit" ] && nef_fatal

    nef_tr_run_transform_command "$_transform_commit" --interactive _shell "$@"
}

######################################################################
# LIB FUNCTIONS

_to_git_commit()
{
    git cat-file -e "$1" || nef_fatal "'$1' does not represent a commit object"
    git rev-parse "$1" || nef_fatal "'$1' could not be resolved to a commit"
}
_git_parent_of()
{
    git log -1 --pretty=%P $1 | sed 's/ .*//'
}
_sync_to_transform_commit() {
    git cat-file -p $1 \
        | grep "^git-transform-channel-transform:" \
        | sed -E 's/^[^:]+: (.*)/\1/' \
        || nef_fatal "could not find the transform out of sync commit $1"
}

# args: <subdir> <commit-ref>
_nef_tr_git_checkout_work()
{
    _wcpath="$1"
    _commit=$2

    if [ -d "$_wcpath" ]; then
        cd "$_wcpath"
        nef_cmd git remote -v
        nef_cmd pwd
        nef_cmd git fetch origin
    else
        nef_cmd git clone --no-checkout --reference  "$nef_git_dir" "$nef_git_dir" "$_wcpath"
        cd "$_wcpath"
    fi

    nef_cmd git reset --hard $_commit
}

# args: <name>
nef_tr_create_container()
{
    echo
}

# args: <transform-tree-ish> <command> [args] ...
nef_tr_run_transform_command()
{
    nef_log --debug "nef_tr_run_transform_command() args:" "$@"
    local _argv=()
    local _opt_interactive=no

    while [ -n "$1" ]; do
        case "$1" in
            --interactive) _opt_interactive=yes; shift ;;
            *) _argv=("${_argv[@]}" "$1"); shift ;;
        esac
    done

    local _transform_commit="${_argv[0]}"
    local _command="${_argv[1]}"
    local _last_transform_dir=$(git name-rev --name-only $_transform_commit | sed 's/~.*//')
    [ "$_last_transform_dir" = "" ] && nef_fatal "invalid transform commit: $_transform_commit"
    local _wcpath="${git_transform_work_path}/${_last_transform_dir}"

    _nef_tr_git_checkout_work "$_wcpath" $_transform_commit
    cd $_wcpath || nef_fatal "could not chdir to $_wcpath"
    nef_log -v "Updated $_wcpath"

    if [ "$_command" != _shell ]; then
        [ -f $GIT_TRANSFORM_ENGINE_DIR/$_command ] \
            || nef_fatal "$GIT_TRANSFORM_ENGINE_DIR/$_command does not exist in transform tree"
    fi

    local _engine_path=$GIT_TRANSFORM_ENGINE_DIR/engine
    local _engine=$(cat $_engine_path) || nef_fatal "missing file '${_engine_path}'"

    nef_log --debug "engine spec = $_engine"
    type=$(echo $_engine | cut -d: -f1)
    [ "$type" = docker ] || nef_fatal "$_enginepath: only the 'docker:' type is supported ('$type')"
    dockertype=$(echo $_engine | cut -d: -f2)
    dockername=$(echo $_engine | cut -d: -f3)

    if test $dockertype = build; then
        nef_log "Building Docker image '${dockername}'"
        _quiet=true
        [ $nef_opt_show_verbose = yes ] && _quiet=false
        sudo \
            docker.io build --rm=true --quiet=$_quiet -t ${dockername} $GIT_TRANSFORM_ENGINE_DIR \
            2>&1 | nef_log_pipe --verbose "docker build:" \
            || nef_fatal "docker build failed"
        nef_log -v "Building done!"
        dockertype=image
    fi

    GIT_TRANSFORM_CONTAINER_CHANNEL_TRANSFORM=$_transform_commit
    GIT_TRANSFORM_CONTAINER_GIT_AUTHOR_NAME=$(git config user.name)
    GIT_TRANSFORM_CONTAINER_GIT_AUTHOR_EMAIL=$(git config user.email)
    # GIT_TRANSFORM_CONTAINER_LOG=$GIT_TRANSFORM_CONTAINER_REPOSITORY/${GIT_TRANSFORM_WORK_DIR}/${_last_transform_dir}/log

    # rm -f log ; touch log

    rm -f $nef_git_dir/output.fifo
    mkfifo $nef_git_dir/output.fifo

    local _docker_opts="--sig-proxy=true"
    local docker_v_opts="-v $nef_git_dir:$GIT_TRANSFORM_CONTAINER_REPOSITORY"
    local docker_env_opts=
    for var in $(compgen -v | grep ^GIT_TRANSFORM_CONTAINER_ ); do
        nef_log --debug "Exporting: $var=${!var}"
        docker_env_opts="$docker_env_opts -e $var=${!var}"
    done

    _full_command_path="${GIT_TRANSFORM_CONTAINER_REPOSITORY}/${GIT_TRANSFORM_WORK_DIR}/${_last_transform_dir}/${GIT_TRANSFORM_ENGINE_DIR}/${_command}"
    if [ "$_command" = _shell ]; then
        _full_command_path=/bin/bash
        _docker_opts="$_docker_opts -t -i" # attach stdin and pseudo-TTY
    fi
    if [ $_opt_interactive = yes ]; then
        _docker_opts="$_docker_opts -t -i" # attach stdin and pseudo-TTY
    else
        _docker_opts="$_docker_opts --attach=stdin --attach=stdout --attach=stderr"
    fi

    case "$dockertype" in
        image)
            # --rm=true
            local _cmd=(
                sudo docker.io run
                $_docker_opts $docker_v_opts $docker_env_opts
                $dockername $_full_command_path "$@"
            )
            nef_log -v \
                "Running Docker image '${dockername}' for command '${_command}':" \
                "${_cmd[@]}"

            trap _signal_sigint SIGINT
            trap _signal_sigterm SIGTERM

            # if test $nef_opt_show_verbose = yes; then
            #     "${_cmd[@]}" || nef_fatal "failed running docker image, try --debug-verbose"
            # else
            #     "${_cmd[@]}" 2>/dev/null || nef_fatal "failed running docker image, try --debug-verbose"
            # fi

            if test $nef_opt_show_verbose = yes; then
                "${_cmd[@]}" &
            else
                "${_cmd[@]}" 2>/dev/null &
            fi
            DOCKER_PID=$!
            ;;
        *)
            nef_fatal "$_engine_path: invalid docker type '$dockertype' (must be 'image' or 'container')"
            ;;
    esac

    nef_log "Waiting"
    wait $DOCKER_PID
    status=$?
    [ $status -ne 0 ] && nef_fatal "failed running docker image, try --debug-verbose"

    # wait $DOCKER_PID
    cd ..

    if [ "$_last_transform_dir" = "undefined" ]; then
        nef_log -v "Removing work directory: $_last_transform_dir"
        rm -rf $_last_transform_dir \
            || nef_log "Warning: could not remove work directory: $_last_transform_dir"
    else
        nef_log --debug "Not removing work directory for possible later use: $PWD/$_last_transform_dir"
    fi

}

_signal_sigint() {
    nef_log "Trapped SIGINT !"
}
_signal_sigterm() {
    nef_log "Trapped SIGTERM !"
}

######################################################################
# TESTS

_test_cmd() {
    nef_cmd --log-prefix "TEST CMD" -- "$@"
}
_test_cmd_tr()
{
    local _opts=""

    [ $nef_opt_show_debug = yes ] && _opts="$_opts -vv"

    _test_cmd "$nef_command_callname" $_opts "$@"
}
_test_echo() {
    nef_log "TEST ECHO:" "$@"
}

# Command: test
##
nef_tr_command_test() {
    local _argv=()

    while [ -n "$1" ]; do
        case "$1" in
            -h) nef_tr_command_help apply; return ;;
            -*) nef_tr_eval_common_option "$1"; shift ;;
            *) _argv=("${_argv[@]}" "$1"); shift ;;
        esac
    done

    [ "${#_argv[@]}" -lt 1 ] && nef_fatal_usage_command test "missing arg: <transform-commit>"
    [ "${#_argv[@]}" -gt 1 ] && nef_fatal_usage_command test "too many args"

    _transform_commit=$(_to_git_commit "${_argv[0]}") \
        || nef_fatal_usage_command test "invalid arg: <transform-commit>"

    nef_log "RUNNING TESTS on transform $_transform_commit"

    dir=$(mktemp --directory)
    nef_log "Created temp dir: $dir"
    cd $dir || nef_log "Could not chdir in temp dir: $dir"
    ## START

    _test_echo "Initializing working tree + initial commit in $PWD"
    _test_cmd git init .
    _test_cmd git fetch "$nef_git_dir"
    _test_cmd git checkout --orphan root
    _test_cmd git reset --hard
    _test_cmd sh -c 'echo bonjour >bonjour'
    _test_cmd git add bonjour
    _test_cmd git commit -m "init commit with file ./bonjour"

    _test_echo "Create sync out of transform commit '$_transform_commit'"
    _test_cmd_tr mksync "$_transform_commit"
    _last_sync="$_last_test_output"
    _test_cmd [ x$_last_sync != x ]
    _test_cmd_tr channels --name $_last_sync
    _channel_output="$_last_test_output"
    _test_cmd [ $(echo $_channel_output | wc -w) -eq 1 ]
    _test_cmd bash -c "echo $_channel_output | grep -v ="
    _test_cmd_tr channels --hash $_last_sync
    _channel_output="$_last_test_output"
    _test_cmd bash -c "echo $_channel_output | grep -E '^[0-9a-f]{40}$'"
    _test_cmd_tr apply "$_last_sync" root root
    _last_sync="$_last_test_output"
    _test_cmd [ x$_last_sync != x ]

    _test_echo "Make a change in 'sub1/' and sync it"
    _test_cmd mkdir -p sub1/subsub/
    _test_cmd sh -c 'echo in-sub >sub1/file'
    _test_cmd sh -c 'echo in-sub-sub >sub1/subsub/subsub-file'
    _test_cmd git add sub1/
    _test_cmd git status
    _test_cmd git commit -m "created sub1/ from root branch"
    _test_cmd_tr apply "$_last_sync" root root
    _last_sync="$_last_test_output"
    _test_cmd [ x$_last_sync != x ]

    _test_cmd_tr channels $_last_sync --hash sub1
    _sub1_commit="$_last_test_output"
    _test_cmd bash -c "echo \"$_sub1_commit\" | grep -E '^[0-9a-f]{40}$'"
    _test_cmd [ $(echo "$_sub1_commit" | wc -w) -eq 1 ]

    _test_cmd git checkout $_sub1_commit
    _test_cmd mkdir other_sub
    _test_cmd sh -c 'echo from-sub1 >>file'
    _test_cmd sh -c 'echo in-other >other_sub/from_sub'
    _test_cmd git add -A
    _test_cmd git status
    _test_cmd git commit -m "from sub1 branch added other and updated 'file'"

    _test_cmd_tr apply "$_last_sync" sub1 HEAD
    _last_sync="$_last_test_output"
    _test_cmd [ x$_last_sync != x ]

    # _test_echo "Checks..."
    _test_cmd git cat-file -p $_sub1_commit
    # _test_cmd git cat-file -p $_last_sync

    # END
    # rm -rf $dir || nef_fatal "could not remove temp dir: $dir"
    # nef_log "Removed temp dir: $dir"
}

nef_tr_command_test_aire() {
    local _argv=()

    while [ -n "$1" ]; do
        case "$1" in
            -h) nef_tr_command_help apply; return ;;
            -*) nef_tr_eval_common_option "$1"; shift ;;
            *) _argv=("${_argv[@]}" "$1"); shift ;;
        esac
    done

    [ "${#_argv[@]}" -lt 1 ] && nef_fatal_usage_command test "missing arg: <transform-commit>"
    [ "${#_argv[@]}" -gt 1 ] && nef_fatal_usage_command test "too many args"

    _transform_commit=$(_to_git_commit "${_argv[0]}") \
        || nef_fatal_usage_command test "invalid arg: <transform-commit>"

    dir=$(mktemp --directory)
    nef_log "Created temp dir: $dir"
    cd $dir || nef_log "Could not chdir in temp dir: $dir"
    ## START

    _test_echo "Initializing working tree + initial commit in $PWD"
    _test_cmd git init .
    _test_cmd git fetch "$nef_git_dir"
    _test_cmd git checkout --orphan root
    _test_cmd git reset --hard
    _test_cmd sh -c 'echo bonjour >bonjour'
    _test_cmd git add bonjour
    _test_cmd git commit -m "init commit with file ./bonjour"

    _test_echo "Create sync out of transform commit '$_transform_commit'"
    _test_cmd_tr mksync "$_transform_commit"
    _last_sync="$_last_test_output"
    _test_cmd [ x$_last_sync != x ]
    _test_cmd_tr channels --name $_last_sync
    _channel_output="$_last_test_output"
    _test_cmd [ $(echo $_channel_output | wc -w) -eq 1 ]
    _test_cmd bash -c "echo $_channel_output | grep -v ="
    _test_cmd_tr channels --hash $_last_sync
    _channel_output="$_last_test_output"
    _test_cmd bash -c "echo $_channel_output | grep -E '^[0-9a-f]{40}$'"

    # _test_cmd_tr apply "$_last_sync" root root
    # _last_sync="$_last_test_output"
    # _test_cmd [ x$_last_sync != x ]

    # END
    # rm -rf $dir || nef_fatal "could not remove temp dir: $dir"
    # nef_log "Removed temp dir: $dir"
}

######################################################################
# COMMAND LINE & RUN

nef_tr_eval_common_option() {
    case "$1" in
        -v | --verbose) nef_opt_show_verbose=yes; shift ;;
        -vv | --debug-verbose) nef_opt_show_verbose=yes; nef_opt_show_debug=yes; shift ;;
        -h | --help) nef_show_usage; exit 0 ;;
        -*) nef_fatal_usage "bad option: $1" ;;
    esac
}

nef_command_usage() {
    nef_tr_command_help
}

nef_fatal_usage_command() {
    local _command="$1"; shift

    nef_log "$_command usage error: $*"
    echo >&2
    nef_tr_command_help --usage "$_command" >&2
    exit 1
}


# Root argument parsing
nef_command_merge_env
nef_command_init_options

nef_tr_command_argv=()
# nef_tr_opt_all=no
# nef_tr_opt_channel_format=shell

while [ -n "$1" ]; do

    case "$1" in
        # --all) nef_tr_opt_all=yes; shift ;;
        # --name) nef_tr_opt_channel_format=name; shift ;;
        # --hash) nef_tr_opt_channel_format=hash; shift ;;
        # --shell) nef_tr_opt_channel_format=shell; shift ;;

        # common options
        # -v | --verbose) nef_opt_show_verbose=yes; shift ;;
        # -vv | --debug-verbose) nef_opt_show_verbose=yes; nef_opt_show_debug=yes; shift ;;
        # -h | --help) nef_show_usage; exit 0 ;;
        # -*) nef_fatal_usage "bad option: $1" ;;
        # *) nef_tr_command_argv=(${nef_tr_command_argv[@]} "$1"); shift ;;

        -*) nef_tr_eval_common_option "$1"; shift ;;
        *) nef_tr_command_argv=("$@"); break ;;
    esac

done

# [ -z "${nef_tr_command_argv[0]}" ] && nef_fatal_usage "missing command"
[ -z "${nef_tr_command_argv[0]}" ] && nef_tr_command_argv=(help)

# Load $nef_git_dir as absolute path
_nef_git_dir=$(git rev-parse --git-dir) || nef_fatal "not in a git repository"
cd $_nef_git_dir
nef_git_dir=$PWD
unset _nef_git_dir
cd - >/dev/null

# Repository-specific variables
git_transform_work_path="${nef_git_dir}/${GIT_TRANSFORM_WORK_DIR}"


# Run command
nef_tr_command_function_name="nef_tr_command_${nef_tr_command_argv[0]}"
unset nef_tr_command_argv[0]
$nef_tr_command_function_name "${nef_tr_command_argv[@]}" \
    || nef_fatal "command ${nef_tr_command_argv[0]} returned status $?"
nef_log -v "Command returned successfully."
